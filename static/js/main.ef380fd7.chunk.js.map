{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","Title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","style","aria-current","role","aria-disabled","aboutText","onClick","toggleMode1","htmlFor","mode1","toggleMode","TextForm","text","setText","useState","Fragment","color","heading","backgroundColor","value","rows","onChange","event","console","log","target","handleUpClick","newText","toUpperCase","showAlert","handleLoClick","toLowerCase","handlecutClick","copyTxt","document","getElementById","select","navigator","clipboard","writeText","split","length","Alert","alert","class","fade","show","word","lower","charAt","slice","capitalize","msg","data-bs-dismiss","App","setMode","setMode1","setAlert","message","setTimeout","body","path","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.ef380fd7.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\n\r\n\r\nexport default function Navbar(props) {\r\n\r\n\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n    <div className=\"container-fluid\">\r\n      <a className=\"navbar-brand\" href=\"/\">{props.Title}</a>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"/navbarScroll\" aria-controls=\"navbarScroll\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarScroll\">\r\n        <ul className=\"navbar-nav me-auto my-2 my-lg-0 navbar-nav-scroll\" style={{ '--bs-scroll-height': '100px' }}>\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n          </li>\r\n          {/* <li className=\"nav-item\">\r\n            <a className=\"nav-link\" href=\"/\">Link</a>\r\n          </li> */}\r\n          <li className=\"nav-item dropdown\">\r\n            <a className=\"nav-link dropdown-toggle\" href=\"/\" role=\"button\"  data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n              Link\r\n            </a>  {/* <ul className=\"dropdown-menu\">\r\n              <li><a className=\"dropdown-item\" href=\"/\">Action</a></li>\r\n              <li><a className=\"dropdown-item\" href=\"/\">Another action</a></li>\r\n              <li><hr className=\"dropdown-divider\"/></li>\r\n              <li><a className=\"dropdown-item\" href=\"/\">Something else here</a></li>\r\n            </ul> */}\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">About</a>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <a href=\"/\" className=\"nav-link disabled\" aria-disabled=\"true\">{props.aboutText}</a>\r\n          </li>\r\n        </ul>\r\n        <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'} mx-3`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode1} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable {props.mode1==='green'?'light':'green'} mode</label>\r\n        </div>\r\n\r\n\r\n        <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable {props.mode==='dark'?'light':'dark'} mode</label>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes ={\r\n    Title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string\r\n\r\n}\r\n\r\n\r\n","import React,{ useState }  from 'react'\r\n\r\nexport default function TextForm(props) {\r\n  const [text, setText] = useState(\"red\"); //use state is a hook there are many hooks present\r\n  const handleUpClick=()=>{\r\nconsole.log(\"Convert to Uppercase was clicked \"+ text);\r\nconst newText = text.toUpperCase();\r\nsetText(newText);\r\nprops.showAlert(\"converted to Uppercase\",\"success\")\r\n  }\r\nconst handleOnChange=(event)=>{\r\n    console.log(\"on Change\");\r\n    setText(event.target.value);\r\n      }\r\n const handlecutClick=()=>{\r\n  const newText = \"\";\r\n  setText(newText);\r\n  props.showAlert(\"text is removed\",\"success\")\r\n\r\n }\r\nconst handleLoClick=()=>{\r\n const newText = text.toLowerCase();\r\n setText(newText);\r\n props.showAlert(\"converted to Lowercase\",\"success\")\r\n}\r\nconst copyTxt=()=>{\r\n  var text=document.getElementById(\"myBox\");\r\n  text.select();\r\n  navigator.clipboard.writeText(text.value)\r\n  props.showAlert(\"text is copied\",\"success\")\r\n}\r\n  return (\r\n    <>\r\n    <div  style={{color:props.mode==='dark'?'white':'black'} && {color:props.mode1==='green'?'white':'black'}} className='container'>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"form-group\">\r\n        <textarea className=\"form-control\" style={{backgroundColor:props.mode==='dark'?'grey':'white',color:props.mode==='dark'?'white':'black'} } value={text} id=\"myBox\" rows=\"10\" onChange={handleOnChange}></textarea>\r\n        </div> \r\n        <button className={`btn btn-${props.mode1==='green'?'success':'primary'} mx-3 my-3`} onClick={handleUpClick}>Convert to Uppercase</button>\r\n        <button className={`btn btn-${props.mode1==='green'?'success':'primary'} mx-3 my-3`} onClick={handleLoClick}>Convert to lowercase</button>\r\n        <button className={`btn btn-${props.mode1==='green'?'success':'primary'} mx-3 my-3`} onClick={handlecutClick}>remove the text</button>\r\n        <button className={`btn btn-${props.mode1==='green'?'success':'primary'} mx-3 my-3`} onClick={copyTxt}>copy the text</button>\r\n\r\n\r\n\r\n    </div>\r\n    <div  style={{color:props.mode==='dark'?'white':'black'} && {color:props.mode1==='green'?'white':'black'} } className=\"container my-3\">\r\n      <h1>YOUR TEXT SUMMARY</h1>\r\n      <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n      <p>{0.008 * text.split(\" \").length} minutes to read </p>\r\n      <p>{text.split(\".\").length-1} number of sentences present</p>\r\n      <h2>preview</h2>\r\n      <p>{text.length===0?\"Enter your text Above to preview it here\":text}</p>\r\n    </div>\r\n\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    if (props.alert == null) {\r\n        return null;\r\n      }\r\n\r\n      const capitalize =(word)=>{\r\n        const lower =word.toLowerCase();\r\n          return lower.charAt(0).toUpperCase()+lower.slice(1)\r\n      }\r\n  return (\r\n    <div>\r\n    {/* props.alert && */}\r\n      <div class={`alert alert-${props.alert.type} alert-dismissible`} fade show role=\"alert\">\r\n  <strong>{capitalize(props.alert.type)}:</strong> {props.alert.msg}\r\n  <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\">\r\n    \r\n  </button>\r\n</div>\r\n    </div>\r\n  )\r\n}\r\n","import React ,{ useState } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar.js';\nimport TextForm from './components/TextForm.js';\n// import Form from './components/Form.js';\n\nimport Alert from './components/Alert.js';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n// } from 'react-router-dom';\n\n\n\n\nfunction App() {\n  const [mode ,setMode] = useState('dark');\n  const [mode1 ,setMode1] = useState('green');\n\n  const [alert ,setAlert] = useState(null);\n\n  const showAlert=(message ,type)=>{\n    setAlert({\n      msg: message ,\n      type: type\n    })\n    setTimeout(() => setAlert(null), 3000); // Alert will disappear after 3 seconds\n  }\n\n\n  const toggleMode=()=>{\n    if(mode==='dark'){\n      setMode('light')\n      document.body.style.backgroundColor='white'\n      showAlert(\"light mode has been enabled\",\"success\")\n    }else{\n      setMode('dark')\n      document.body.style.backgroundColor='#042743'\n      showAlert(\"dark mode has been enabled\",\"success\")\n      // document.title='Textutils - dark mode'\n      // setInterval(() => {\n      //   document.title='install text utils'\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title='text utils is amazing'\n      // }, 1500);\n    }\n  }\n\n\n\n  const toggleMode1=()=>{\n    if(mode1==='green'){\n      setMode1('light')\n      document.body.style.backgroundColor='white'\n      showAlert(\"light mode has been enabled\",\"success\")\n    }else{\n      setMode1('green')\n      document.body.style.backgroundColor='#294715'\n      showAlert(\"green mode has been enabled\",\"success\")\n    }\n  }\n\n  return (\n<>\n{/* <Router> */}\n<Navbar Title=\"Textutils\" aboutText=\"Text utils based on react \" mode={mode} mode1={mode1} toggleMode1={toggleMode1} toggleMode={toggleMode}/>\n<Alert alert={alert}/>\n\n<div className=\"container my-3\">\n{/* <Routes> */}\n  {/* path == will render this  /user --> component 1\n  /user/home --> component 2 use exact path instead*/ }\n  {/* <Route exact path='/about' element={<Form/>} >\n  </Route> */}\n  {/* <Route path='/users'>\n     <Users/>\n  </Route> */}\n  {/* <Route exact path='/' element={<TextForm mode={mode} mode1={mode1}  showAlert={showAlert} heading=\"enter the text here\"/> }> */}\n  <TextForm mode={mode} mode1={mode1} path=\"/\" showAlert={showAlert} heading=\"enter the text here\"/>  \n  {/* </Route>\n</Routes> */}\n</div>\n{/* </Router> */}\n</>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}